clear; clc;close all;


I = im2double(imread('hazy3.png'));
A = AirlightDirection(I);
[h, w ,c] = size(I);
A3 = reshape(A,1,1,3);
repA = repmat(A3,h,w);

%% Subtract Airlight via Haze-Lines & Initial Transmission

disp('estimate transmission...')
[~, t_est] = dehazeHazeLines(I, A);
alpha = t_est;

%% Compute Per-Pixel Airlight Contribution
% aPart is simply a per-pixel estimate of how much of the airlight (haze) is present in each color channel.
clear aPart
for c=1:3
    aPart(:,:,c) = alpha.*repA(:,:,c);
end
% alpha is the estimated transmission map (HÃ—W), telling what fraction of the scene radiance makes it through the haze.
% repA(:,:,c) is the atmospheric light value A(c) broadcast over the whole image for channel c.
% So aPart(:,:,c) = alpha .* repA(:,:,c) gives, at each pixel, the amount of channel-c haze contribution.

withoutA = I-aPart; % substracting the global haze to the image,
withoutA(withoutA<0)=0; %a logical mask of the same size as withoutA, marking every pixel that are negative to zero.

% Then withoutA(mask)=0 assigns 0 to all those locations.
figure, imagesc(alpha),colormap gray, axis image, truesize;title('alpha');
figure, imagesc(withoutA), axis image, truesize;title('withoutA');

%% compute l*
disp('calc l*...')
initMag = 0.5;
isNegative = true;
while(isNegative)
    initMag = initMag + 0.1;
    for c=1:3
        L(:,:,c) = withoutA(:,:,c)./(1-alpha./initMag); % reconstructed radiance
    end
    isNegative = false;
    if(any(any(any(L<0))))
        isNegative = true;
    end
end
% the magnitude is now fixed, we can derive the final transmission and
% radiance 
for c=1:3
    L(:,:,c) = withoutA(:,:,c)./(1-alpha./initMag);
end
gray = sqrt(L(:,:,1).^2 + L(:,:,2).^2 + L(:,:,3).^2);
shading = reshape(gray,w*h,1);
T = (1-alpha./initMag);% T is the transmission map
transmission = reshape(T,w*h,1);


maxAlpha =  max(transmission);
minAlpha = min(transmission);
numBins = 50;
binW = (maxAlpha-minAlpha)/numBins;
mtrans = [minAlpha:binW:maxAlpha];
mshading = zeros(size(mtrans));
for i=1:size(mtrans,2)
    val = mtrans(i)+binW/2;
    inBin = shading(transmission < val+binW/2 & transmission >= val - binW/2);
    numInBin = max(size(inBin,1));
    if(numInBin>100)
        inBin = sort(inBin);
        mshading(i) = inBin(round(0.99*numInBin));
    end
end

disp('fit a,k...')
[ak] = fminsearch(@(x) fitError(x,withoutA, alpha,mshading,initMag),[1,1]);
a = ak(1);
mag = initMag/a;



[h, w, c] = size(withoutA);
for c=1:3
    L(:,:,c) = withoutA(:,:,c)./(1-alpha./mag);
end
all = reshape(L,w*h*c,1);
all=sort(all);
L = L - all(1);
all = all - all(1);
L = L/all(round(w*h*c*0.99));
L(L>1) = 1;
% figure,imagesc(L),axis image, truesize;

A1 = A * mag;
[output, transmission] = dehazeHazeLines(I, A1);


figure;
imshow(output);
title('Dehazed Image');



figure;
imshow(reshape(A1, 1, 1, 3), InitialMagnification=10000);
title('Estimated Airlight Color A');


